h1. eDriven Framework

h1. Event-driven / asynchronous framework for "Unity3d":http://unity3d.com/.

h2. Author: Danko Kozar

h2. Concept

 * eDriven framework is the result of 10 years of programming experience, self-education and research.
 * Basically, it is the adapter for Unity to get it to work as an asynchronous system.
 * It is inspired by RIA (Rich Internet Applications) frameworks, such as Apache Flex and other Actionscript and Javascript frameworks.
 * The idea behind building a framework was to bring the event-driven programming paradigm to Unity.
 * There has been a number of libraries for Unity, but I decided to go with my own. The reasoning behind this was I wanted to build additional libraries upon my event-dispatching system and wanted the total control.
 * .NET framework events were not appropriate.
 * There are two parallel event-dispatching systems inside eDriven: 
    1) Signals
	2) Events
 * Signals are inspired by "Robert Panner's Signals":https://github.com/robertpenner/as3-signals and are used for framework internals. Signals are faster then events because there's no instantiation involved. Also, your class isn't required to inherit some base (dispatcher) class.
 * Events are more common and are inspired by "DOM Level 3 Events":http://www.w3.org/TR/DOM-Level-3-Events/. They support event bubbling, which is an important feature for GUI. The class that needs to dispatch events must inherit from EventDispatcher class.

h2. Event syntax

<pre><code>button.AddEventListener(MouseEvent.CLICK, ClickHandler);

private void ClickHandler(Event e) // eDriven.Core.Events.Event
{
	Button button = e.Target as Button;
	Debug.Log("Clicked button with label: " + button.Text);
	
	// or
	MouseEvent me = (MouseEvent)e; // we got to know the type of the Event
	Point position = me.GlobalPosition;
	Debug.Log("Clicked at position: " + position);
}

</code></pre>

h2. Signal syntax

<pre><code>button.ClickSignal.Connect(ClickSlot);

private void ClickSlot(params object[] parameters)
{
	// do something with parameters (we got to know the number of parameters and each one's type)
}
</code></pre>

h2. Core classes and utilities

eDriven framework contains a number of classes:

 * SystemManager (emits system signals)
 * SystemEventDispatcher (dispatches system events)
 * MouseEventDispatcher (dispatches mouse events)
 * KeyboardMapper (easy mapping for keyboard gestures)
 * CallbackQueue (implements queuing of async operations)
 * TaskQueue (sequences async operations)
 * PowerMapper (maps strings to stuff)
 * AudioPlayerMapper (maps strings to AudioPlayers)
 * Cache (caches stuff)
 * ObjectPool (prevents instantiation and garbage collection problems)
 * Timer (handy source of timed events)
 * HttpConnector (loads stuff from the web and triggers responders when finished)
 * JavascriptConnector (talks with a host web page)

... and many others. They all serve the purpose of the framework: making the asynchronous, event-driven programming possible with Unity. 

h2. Resources

* "eDriven API":http://edriven.dankokozar.com/api/1-0/ (note: eDriven.Gui and eDriven.Animation also included in the API)
* "Binaries (DLL-s)":http://code.google.com/p/edriven/downloads/list
* "Videos":http://www.youtube.com/playlist?list=PL7EE340828F962941
* "Demo site":http://edrivenunity.com/ (requires Unity web player)
* "Unity Forum thread":http://forum.unity3d.com/threads/76835-eDriven-framework-for-Unity-released?p=492016#post492016
* "Author's homepage":http://dankokozar.com
* "I’m @DankoKozar on Twitter":https://twitter.com/DankoKozar.